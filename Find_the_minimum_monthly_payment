# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
balance = 32000
annualInterestRate = 0.2
monthlyInterestRate = annualInterestRate / 12.0
minMonthlyPayment = balance / 12.0
maxMonthlyPayment = (balance * (1 + monthlyInterestRate)**12) /12
monthlyPayment = 0

updateBalance = 1
epsilon = 0.01

def update(monthlyPayment):
    updateBalance = balance
    for month in range(1, 13):
        monthlyUnpaidBalance = updateBalance - monthlyPayment
        monthlyInterest = monthlyUnpaidBalance * monthlyInterestRate
        updateBalance = monthlyUnpaidBalance + monthlyInterest
    return updateBalance

def goodEnough(monthlyPayment):
	if update(monthlyPayment) <= 0 and abs(update(monthlyPayment)) < epsilon:
		return True
	else:
		return False


def improve(monthlyPayment):
	def tooBig(monthlyPayment):
		return update(monthlyPayment) < 0 and abs(update(monthlyPayment)) >= epsilon

	def tooSmall(monthlyPayment):
		return update(monthlyPayment) > 0
	
	if tooBig(monthlyPayment):
		monthlyPayment = (minMonthlyPayment + monthlyPayment) / 2

	elif tooSmall(monthlyPayment):
		monthlyPayment = (maxMonthlyPayment + monthlyPayment) /2
	return monthlyPayment
#newMonthlyPayment = 0

def toFind(monthlyPayment):                                           #this fuction leads to infinite loop. 
    if not goodEnough(monthlyPayment):
                 monthlyPayment = improve(monthlyPayment)
                 return toFind(monthlyPayment)
    else:
         return monthlyPayment
	
 

theMonthlyPayment = toFind(monthlyPayment)


print('Lowest Payment:', theMonthlyPayment)





















# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
import sys
sys.setrecursionlimit(10000)
balance = 3926
annualInterestRate = 0.2
monthlyInterestRate = annualInterestRate / 12.0
minMonthlyPayment = balance / 12.0
maxMonthlyPayment = (balance * (1 + monthlyInterestRate)**12) /12
monthlyPayment = 0


epsilon = 0.01

def update(monthlyPayment):
    updateBalance = balance
    updateBalance = 1
    for month in range(1, 13):
        
        monthlyUnpaidBalance = updateBalance - monthlyPayment
        monthlyInterest = monthlyUnpaidBalance * monthlyInterestRate
        updateBalance = monthlyUnpaidBalance + monthlyInterest
    return updateBalance

#def goodEnough(monthlyPayment):
#	if update(monthlyPayment) <= 0 and abs(update(monthlyPayment)) < epsilon:
#		return True
#	else:
#		return False

updateBalance = update(monthlyPayment)

def improve(monthlyPayment):
	def tooBig(monthlyPayment):
		return -epsilon <= update(monthlyPayment) < 0 #and abs(update(monthlyPayment)) >= epsilon

	def tooSmall(monthlyPayment):
		return update(monthlyPayment) > 0
	
	if tooBig(monthlyPayment):
		monthlyPayment = (minMonthlyPayment + monthlyPayment) / 2

	elif tooSmall(monthlyPayment):
		monthlyPayment = (maxMonthlyPayment + monthlyPayment) /2
	return monthlyPayment


#while not goodEnough(monthlyPayment):
#    monthlyPayment = improve(monthlyPayment)

while updateBalance > 0 or abs(updateBalance) > epsilon:
    
    
    if abs(updateBalance) > epsilon and updateBalance < 0:
        monthlyPayment = (minMonthlyPayment + monthlyPayment) / 2
    elif updateBalance > 0:
        monthlyPayment = (maxMonthlyPayment + monthlyPayment) /2
    
    
    
    

    


    

    
	
 

#theMonthlyPayment = toFind(monthlyPayment)
#
#
print('Lowest Payment:', monthlyPayment)	



def update(monthlyPayment):
    updateBalance = balance
    updateBalance = 1
    for month in range(1, 12):
        
        monthlyUnpaidBalance = updateBalance - monthlyPayment
        monthlyInterest = monthlyUnpaidBalance * monthlyInterestRate
        updateBalance = monthlyUnpaidBalance + monthlyInterest
    return updateBalance

tolerance = 0.00001

def fixedPoint (f, firstGuess):
    def closeEnough(x, y):
        return ((abs (x - y)) < tolerance)
    def test(guess):
        def next():
            return f(guess)
        if closeEnough(guess, next()):
			return next()
		else:
			return test(next())
	return test(firstGuess)

def averageDamp(f):
#    average = ((x + f(x)) / 2.0)
#    return average
    lambda x: (x + f(x)) / 2

balance = 3926    
annualInterestRate = 0.2
monthlyInterestRate = annualInterestRate / 12.0
minMonthlyPayment = balance / 12.0
maxMonthlyPayment = (balance * (1 + monthlyInterestRate)**12) /12
monthlyPayment = 0
